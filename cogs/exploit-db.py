import requests
import urllib
from discord.ext import commands
import json
import discord
from libs.embedmaker import configFooter
from html import unescape

# flag to get request parameter
params = {
    "title": "&q=",
    "cve": "&cve=",
    "type": "&type=",
    "platform": "&platform=",
    "port": "&port=",
    "content": "&text=",
    "author": "&e_author=",
    "tag": "&tag=",
}

# allowed platforms
platforms = "aix", "alpha", "android", "arm", "ashx", "asp", "aspx", "atheos", "beos", "bsd", "bsdi_x86", "bsd_ppc", \
            "bsd_x86", "cfm", "cgi", "ezine", "freebsd", "freebsd_x86", "freebsd_x86-64", "generator", "hardware", \
            "hp-ux", "immunix", "ios", "irix", "java", "json", "jsp", "linux", "linux_crisv32", "linux_mips", \
            "linux_ppc", "linux_sparc", "linux_x86", "linux_x86-64", "lua", "macos", "magazine", "minix", "multiple", \
            "netbsd_x86", "netware", "nodejs", "novell", "openbsd", "openbsd_x86", "osx", "osx_ppc", "palm_os", \
            "perl", "php", "plan9", "python", "qnx", "ruby", "sco", "sco_x86", "solaris", "solaris_mips", \
            "solaris_sparc", "solaris_x86", "superh_sh4", "system_z", "tru64", "ultrix", "unix", "unixware",\
            "vxworks", "watchos", "windows", "windows_x86", "windows_x86-64", "xml"

# allowed types
types = "dos", "local", "remote", "shellcode", "papers", "webapps"

# tags for help
tags_help = {
    "Wordpress Core": "Wordpress Core", "Metasploit": "msf", "Wordpress Plugin": "Wordpress Plugin",
    "SQL Injection": "SQLi", "Cross-Site Scripting": "xss", "file inclusion": "fi",
    "Cross-Site Request Forgery": "CSRF", "Denial of Service": "dos", "command injection": "command injection",
    "authentication/credential bypass": "ac/bc", "Client Side": "Client Side", "Use after Free": "UAF",
    "Out of bounds": "out of bounds", "remote": "remote", "local": "local", "XML external entity": "XEE",
    "integer overflow": "integer overflow", "server-side request forgery": "ssrf", "race condition": "race condition",
    "NULL Pointer Dereference": "nullpointer", "malware": "malware", "buffer overflow": "buffer overflow",
    "heap overflow": "heap overflow", "type confusion": "type confusion", "object injection": "object injection",
    "bug report": "bug report", "console": "console", "Pwn2Own": "Pwn2Own", "traversal": "traversal",
    "deserialization": "deserialization",
}

# tags to tag number
tags = {
    "wordpress core": 1,
    "msf": 3,
    "wordpress plugin": 4,
    "sqli": 7,
    "xss": 8,
    "fi": 9,
    "csrf": 12,
    "dos": 13,
    "code injection": 14,
    "command injection": 15,
    "ac/cb": 16,
    "client side": 18,
    "uaf": 19,
    "out of bounds": 20,
    "remote": 21,
    "local": 22,
    "xxe": 23,
    "integer overflow": 24,
    "ssrf": 25,
    "race condition": 26,
    "nullpointer": 27,
    "malware": 28,
    "buffer overflow": 31,
    "heap overflow": 34,
    "type confusion": 35,
    "object injection": 36,
    "bug report": 37,
    "console": 38,
    "pwn2own": 39,
    "traversal": 40,
    "deserialization": 41,
}


def parse_flag(flag):
    flag_p = flag.split(" ")[0]
    parameters = flag[len(flag_p) + 1:]
    if flag_p == "platform" and parameters not in platforms:
        return "! platform"
    if flag_p == "type" and parameters not in types:
        return '! types'
    if flag_p == "tag" and parameters not in tags:
        return '! tag'
    if flag_p not in params.keys():
        return False
    if flag_p == 'tag':
        parameters = str(tags[parameters])
    return params[flag_p] + urllib.parse.quote(parameters)


def get_get_request(query):
    query = " " + query
    if " -" not in query:
        return "?q=" + urllib.parse.quote(query[1:])
    query = list(filter(None, query.split(" -")))
    request = ''
    for flag in query:
        parsed = parse_flag(flag)
        if not parsed or parsed.split(" ")[0] == '!':
            return parsed
        request += parsed
    return str(request.replace('&', '?', 1))


data_params = '&columns%5B0%5D%5Bdata%5D=date_published&columns%5B0%5D%5Bname%5D=date_published&columns%5B0%5D%5Bsea' \
               'rchable%5D=true&columns%5B0%5D%5Borderable%5D=true&columns%5B0%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B0' \
               '%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B1%5D%5Bdata%5D=download&columns%5B1%5D%5Bname%5D=download&' \
               'columns%5B1%5D%5Bsearchable%5D=false&columns%5B1%5D%5Borderable%5D=false&columns%5B1%5D%5Bsearch%5D%5' \
               'Bvalue%5D=&columns%5B1%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B2%5D%5Bdata%5D=application_md5&colum' \
               'ns%5B2%5D%5Bname%5D=application_md5&columns%5B2%5D%5Bsearchable%5D=true&columns%5B2%5D%5Borderable%5D' \
               '=false&columns%5B2%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B2%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B3' \
               '%5D%5Bdata%5D=verified&columns%5B3%5D%5Bname%5D=verified&columns%5B3%5D%5Bsearchable%5D=true&columns%' \
               '5B3%5D%5Borderable%5D=false&columns%5B3%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B3%5D%5Bsearch%5D%5Bregex' \
               '%5D=false&columns%5B4%5D%5Bdata%5D=description&columns%5B4%5D%5Bname%5D=description&columns%5B4%5D%5B' \
               'searchable%5D=true&columns%5B4%5D%5Borderable%5D=false&columns%5B4%5D%5Bsearch%5D%5Bvalue%5D=&columns' \
               '%5B4%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B5%5D%5Bdata%5D=type_id&columns%5B5%5D%5Bname%5D=type_i' \
               'd&columns%5B5%5D%5Bsearchable%5D=true&columns%5B5%5D%5Borderable%5D=false&columns%5B5%5D%5Bsearch%5D%' \
               '5Bvalue%5D=&columns%5B5%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B6%5D%5Bdata%5D=platform_id&columns%' \
               '5B6%5D%5Bname%5D=platform_id&columns%5B6%5D%5Bsearchable%5D=true&columns%5B6%5D%5Borderable%5D=false&' \
               'columns%5B6%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B6%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B7%5D%5Bd' \
               'ata%5D=author_id&columns%5B7%5D%5Bname%5D=author_id&columns%5B7%5D%5Bsearchable%5D=false&columns%5B7%' \
               '5D%5Borderable%5D=false&columns%5B7%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B7%5D%5Bsearch%5D%5Bregex%5D=' \
               'false&order%5B0%5D%5Bcolumn%5D=0&order%5B0%5D%5Bdir%5D=desc&start=0&length=4&search%5Bvalue%5D=&sear' \
               'ch%5Bregex%5D=false'


# Cog
class ExploitDb(commands.Cog, name="Utility"):
    def __init__(self, bot):
        self.bot = bot

    @commands.command(description="Searches exploit-db for exploits.",
                      usage="[-Title][-CVE][-Type][-Platform][-Port]["
                            "-Content][-Author][-Tag][-Help] {Query}")
    async def exploit(self, ctx, *, query: str):
        query = query.lower()

        parameters = get_get_request(query)
        # help menu
        if '-help' in query or parameters.split(" ")[0] == '!':
            help_called_color = 0x0080ff
            help_called_thumbnail = "https://cdn.discordapp.com/attachments/695950796248" \
                                    "055848/696071528768471050/spider-blue.png"
            help_triggered_color = 0xCD0000
            help_triggered_thumbnail = "https://cdn.discordapp.com/attachments/695950796248" \
                                       "055848/696072273874124830/spider-red.png"
            # shows allowed types
            parameters = str(parameters)
            triggered = "!" in parameters
            if triggered:
                color = help_triggered_color
                thumbnail = help_triggered_thumbnail
            else:
                color = help_called_color
                thumbnail = help_called_thumbnail
            if 'type' in query or 'type' in parameters:
                embed = discord.Embed(
                    title="Help Page of exploit-db",
                    description=f"{'You have entered a wrong type. ' if triggered else ''}"
                                f"Allowed types are: \n`{', '.join(types)}`",
                    color=color
                )
                embed.set_thumbnail(url=thumbnail)
                await ctx.send(embed=embed)
            if 'platform' in query or 'platform' in parameters:
                embed = discord.Embed(
                    title="Help Page of exploit-db",
                    description="You have entered a wrong Platform, allowed Platforms are:"
                    if 'platform' in parameters else "Allowed Platforms are: \n",
                    color=color
                )
                embed.set_thumbnail(url=thumbnail)
                field = ''
                al = 'a'
                for platform in platforms:
                    if platform[0] != al:
                        embed.add_field(name=al.upper(),
                                        value=field[:-2],
                                        inline=True)
                        al = platform[0]
                        field = ''
                    field += platform + ", "
                embed.set_footer(text=configFooter)
                await ctx.send(embed=embed)
            if 'tag' in query or 'tag' in parameters:
                embed = discord.Embed(
                    title="Help Page of exploit-db",
                    description='You have entered a wrong tag, allowed tags are:'
                    if 'tag' in parameters else 'Allowed Tags are:',
                    color=color
                )
                embed.set_thumbnail(url=thumbnail)
                embed.add_field(
                    name="Tag name",
                    value="What to type",
                    inline=False
                )
                for key in tags_help.keys():
                    embed.add_field(name=key,
                                    value=tags_help[key],
                                    inline=True)
                embed.set_footer(text=configFooter)
                embed.set_thumbnail(url=thumbnail)
                await ctx.send(embed=embed)
            elif 'type' not in query and 'platform' not in query and 'tag' not in query:
                embed = discord.Embed(
                    title="Help Page of exploit-db",
                    description="Here are all the flags you can use:",
                    color=color
                )
                embed.add_field(name="-Title",
                                value="A part of the title of your exploit",
                                inline=False)
                embed.add_field(name="-CVE",
                                value="The CVE Number of your exploit, both CVE-x-x and x-x supported.",
                                inline=False)

                embed.add_field(name="-Type",
                                value="The type of your exploit, use `-Help Type` to see allowed values",
                                inline=False)
                embed.add_field(name="-Platform",
                                value="The platform your exploit is for, use `-Help Platform` to see allowed values",
                                inline=False)
                embed.add_field(name="-Port",
                                value="The Port your exploit is for, allowed Values are 1 - 65535,"
                                      " though not all will have results.",
                                inline=False)
                embed.add_field(name="-Content",
                                value="Content of your exploit",
                                inline=False)
                embed.add_field(name="-Author",
                                value="Submitter of your exploit",
                                inline=False)
                embed.add_field(name="-Tag",
                                value="Tag on exploit, use `-Help Tag` to see allowed values",
                                inline=False)
                embed.add_field(name="Other infos:",
                                value="If you use a flag twice the second value is used.\n "
                                      "If you don't use any flags, -Title will be used.",
                                inline=False)
                embed.set_thumbnail(url=thumbnail)
                embed.set_footer(text=configFooter)
                await ctx.send(embed=embed)
            return
        if not parameters:
            embed = discord.Embed(
                title="Something seems to be wrong with your Syntax!",
                description=f"Try -Help",
                color=0xCD0000
            )
            embed.set_thumbnail(url="https://media.discordapp.net/attachments/695669681662722069/695736581662965800/"
                                    "spider-red.png?width=60&height=60")
            await ctx.send(embed=embed)
            return

        url = "https://www.exploit-db.com/search" + parameters
        soup = requests.get(url + data_params,
                            headers={'User-Agent': 'TryHackMeBot',
                                     'Referer': 'https://www.exploit-db.com/search' + get_get_request(query),
                                     'Accept': 'application/json, text/javascript, */*; q=0.01',
                                     'Accept - Language': 'en - US, en; q = 0.5',
                                     'Accept - Encoding': 'gzip, deflate',
                                     'X-Requested-With': 'XMLHttpRequest',
                                     'Connection': 'close',
                                     'Host': 'www.exploit-db.com'}).content
        soup = json.loads(soup)
        if len(soup['data']) == 0:
            embed = discord.Embed(
                title="No exploits Found!",
                description="Gotta search for an 0-day.",
                color=0xCD0000
            )
            embed.set_thumbnail(url="https://media.discordapp.net/attachments/695669681662722069/695736581662965800/"
                                    "spider-red.png?width=60&height=60")
            await ctx.send(embed=embed)
            return
        embed = discord.Embed(
            title="Exploit-DB",
            description=f"Found {soup['recordsTotal']} Exploit{'' if len(soup['data']) == 1 else 's'}\n\n",
            color=0xEB6024,
        )
        embed.set_footer(text=configFooter)
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/"
                                "695669681662722069/695722036236124291/spider-orange.png?width=60&height=60")
        for exploit in soup['data']:
            embed.add_field(name="\n-------------------------------------------------------"
                                 "----------------------------",
                            value=f"Exploit #{exploit['id']}", inline=False)
            cve = 'N/A'
            embed.add_field(name="Description:",
                            value=unescape(exploit['description'][1]), inline=False)
            for code in exploit['code']:
                if code['code_type'] == 'cve':
                    cve = code['code']
            embed.add_field(name='CVE:',
                            value=cve, inline=True)
            embed.add_field(name='Platform:',
                            value=exploit['platform_id'], inline=True)
            embed.add_field(name="Download?",
                            value='yes' if 'download' in exploit.keys() else 'no',
                            inline=True)
            embed.add_field(name='More Information:',
                            value=f"[Exploit-DB]"
                                  f"(https://www.exploit-db.com/exploits/{exploit['id']})")
        embed.add_field(name="-------------------------------------------------------"
                             "----------------------------",
                        value=f"See more results [here]({url})", inline=False)
        await ctx.send(embed=embed)


def setup(bot):
    bot.add_cog(ExploitDb(bot))
